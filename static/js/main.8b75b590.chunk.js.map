{"version":3,"sources":["serviceWorker.js","components/lib/private_route.js","components/header.js","components/login.js","models/repo.js","models/issue.js","lib/github_client.js","stores/issue_store.js","lib/cache.js","components/repo_list/issue_count.js","models/pull_request.js","stores/pull_request_store.js","components/repo_list/pull_request_count.js","components/repo_list/repo_item.js","stores/repo_store.js","components/repo_list/index.js","components/issue_list/issue_item.js","components/issue_list/index.js","components/pull_request_list/pull_request_item.js","components/pull_request_list/index.js","components/index.js","index.js"],"names":["Boolean","window","location","hostname","match","PrivateRoute","root","process","path","this","props","render","authenticated","children","to","pathname","state","from","React","Component","Header","src","className","alt","Login","token","handleChange","bind","handleSubmit","event","input","currentTarget","setState","value","preventDefault","assignToken","history","replace","onSubmit","htmlFor","type","id","onChange","Repo","name","url","openIssuesCount","repo","Issue","number","title","createdAt","DateTime","fromISO","commentCount","GitHubClient","storage","request","getItem","startsWith","fetch","method","headers","response","link","get","json","data","IssueStore","client","issues","do","issue","pull_request","push","html_url","created_at","comments","Cache","key","_key","setItem","JSON","stringify","parse","IssueCount","cacheKey","result","cache","i","length","load","previousProps","store","list","set","priority","count","aria-label","size","PullRequest","PullRequestStore","pullRequests","pullRequest","PullRequestCount","pull_requests","RepoItem","isEqualTo","parts","split","org","href","target","rel","issueStore","pullRequestStore","RepoStore","repos","full_name","open_issues_count","RepoList","loading","handleReload","interval","timer","setInterval","clearInterval","Promise","all","repoStore","results","sort","a","b","nameA","toUpperCase","nameB","items","map","onClick","IssueItem","createdAtRelative","toRelative","createdAtDate","toLocaleString","month","day","year","commentCountClass","IssueList","cachedRepos","cachedIssues","createdAtA","toMillis","createdAtB","reposByOrg","promises","orgRepos","promise","issuesByRepo","repoIssues","PullRequestItem","PullRequestList","cachedPullRequests","pullRequestsByRepo","repoPullRequests","pr","App","localStorage","gitHubClient","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b75b590.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ntype Props = {|\n  children: Node,\n  authenticated: boolean,\n  path: string,\n|};\n\nexport default class PrivateRoute extends React.Component<Props> {\n  render(): Node {\n    let root = \"\";\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <Route\n        path={this.props.path}\n        render={({ location }) =>\n          this.props.authenticated ? (this.props.children) : (\n            <Redirect to={ { pathname: `${root}/login`, state: { from: location } } } />\n          )\n        }\n      />\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/header.css';\n\ntype Props = {||};\n\nclass Header extends React.Component<Props> {\n  render(): Node {\n    let root = '';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <header>\n        <h1>\n          <Link to={root}>\n            <img src={`${root}/logo512.png`} className=\"logo\" alt=\"logo\" />\n            Paketo Buildpacks\n          </Link>\n        </h1>\n        <div className=\"navigation\">\n          <h3>\n            <Link to={`${root}/issues`}>Issues</Link>\n          </h3>\n          <h3>\n            <Link to={`${root}/pull-requests`}>Pull Requests</Link>\n          </h3>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/login.css';\n\ntype Props = {|\n  assignToken: string => void,\n  history: {\n    replace: { pathname: string } => void,\n  },\n  location: { state: { from: { pathname: string } } },\n|};\n\ntype State = {|\n  token: string,\n  from: { pathname: string },\n|};\n\nclass Login extends React.Component<Props, State> {\n  handleChange: SyntheticEvent<HTMLInputElement> => void;\n  handleSubmit: SyntheticEvent<HTMLFormElement> => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    let root = '/';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    const { from } = this.props.location.state || { from: { pathname: root } };\n    this.state = { token: '', from: from };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: SyntheticEvent<HTMLInputElement>): void {\n    const input = (event.currentTarget: HTMLInputElement);\n    this.setState({ token: input.value });\n  }\n\n  handleSubmit(event: SyntheticEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    this.props.assignToken(this.state.token);\n    this.props.history.replace(this.state.from);\n  }\n\n  render(): Node {\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"token\">GitHub Personal Access Token</label>\n        <input type=\"text\" id=\"token\" value={this.state.token} onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","// @flow\n\ntype Props = {|\n  id: number,\n  name: string,\n  url: string,\n  openIssuesCount: number,\n|};\n\nclass Repo {\n  id: number;\n  name: string;\n  url: string;\n  openIssuesCount: number;\n\n  constructor(props: Props) {\n    this.id = props.id;\n    this.name = props.name;\n    this.url = props.url;\n    this.openIssuesCount = props.openIssuesCount;\n  }\n\n  isEqualTo(repo: Repo): boolean {\n    return repo.name === this.name &&\n      repo.url === this.url &&\n      repo.openIssuesCount === this.openIssuesCount\n  }\n}\n\nexport default Repo;\n","// @flow\n\nimport { DateTime } from 'luxon';\n\ntype Props = {|\n  id: number,\n  number: number,\n  title: string,\n  url: string,\n  createdAt: string,\n  commentCount: number,\n|};\n\nexport default class Issue {\n  id: number;\n  number: number;\n  title: string;\n  url: string;\n  createdAt: DateTime;\n  commentCount: number;\n\n  constructor(props: Props) {\n    this.id = props.id;\n    this.number = props.number;\n    this.title = props.title;\n    this.url = props.url;\n    this.createdAt = DateTime.fromISO(props.createdAt);\n    this.commentCount = props.commentCount;\n  }\n}\n","// @flow\n\nimport { StorageInterface } from '../lib/storage';\n\nexport type GitHubClientRequest = {\n  method: string,\n  path: string,\n};\n\nexport type GitHubClientResponse = {\n  data: any[];\n  headers: {\n    link: ?string,\n  },\n};\n\ntype Props = {|\n  storage: StorageInterface,\n|};\n\nexport default class GitHubClient {\n  storage: StorageInterface;\n  worker: {\n    do: (token: ?string, method: string, path: string) => Promise<GitHubClientResponse>\n  };\n\n  constructor(props: Props) {\n    this.storage = props.storage;\n  }\n\n  async do(request: GitHubClientRequest): Promise<GitHubClientResponse> {\n    const token = this.storage.getItem('token') || '';\n\n    let url = request.path\n    if (url.startsWith('/')) {\n      url = `https://api.github.com${url}`;\n    }\n\n    const response = await fetch(url, {\n      method: request.method,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    })\n\n    const link = response.headers.get('Link');\n    const data = await response.json();\n\n    return {\n      data: data,\n      headers: {\n        link: link,\n      },\n    };\n  }\n}\n\nexport interface GitHubClientInterface {\n  do(GitHubClientRequest): Promise<GitHubClientResponse>;\n};\n","// @flow\n\nimport Issue from '../models/issue';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class IssueStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<Issue[]> {\n    let path: string = `/repos/${repo}/issues`;\n    let issues: Issue[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const issue of response.data) {\n        if (!issue.pull_request) {\n          issues.push(new Issue({\n            id: issue.id,\n            number: issue.number,\n            title: issue.title,\n            url: issue.html_url,\n            createdAt: issue.created_at,\n            commentCount: issue.comments,\n          }));\n        }\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return issues;\n  }\n};\n\nexport interface IssueStoreInterface {\n  list(repo: string): Promise<Issue[]>;\n};\n","// @flow\n\nimport { StorageInterface } from './storage';\n\ntype Props = {|\n  storage: StorageInterface,\n|};\n\nexport default class Cache {\n  props: Props;\n\n  constructor(props: Props) {\n    this.props = props;\n  }\n\n  set(key: string, value: { [key: string]: any}): void {\n    key = this._key(key);\n\n    this.props.storage.setItem(key, JSON.stringify(value));\n  }\n\n  get(key: string): { [key: string]: any} {\n    key = this._key(key);\n\n    const value = this.props.storage.getItem(key);\n\n    if (!value) {\n      return {};\n    }\n\n    return JSON.parse(value);\n  }\n\n  _key(key: string): string {\n    key = key.replace(/^(\\/)/,\"\");\n    return `/cache/${key}`;\n  }\n}\n\nexport interface CacheInterface {\n  get(key: string): { [key: string]: any};\n  set(key: string, value: { [key: string]: any}): void;\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../../styles/repo_list/issue_count.css';\nimport Issue from '../../models/issue';\nimport Repo from '../../models/repo';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { CacheInterface } from '../../lib/cache';\nimport { IssueOpenedIcon } from '@primer/octicons-react';\n\ntype Props = {|\n  repo: Repo,\n  cache: CacheInterface,\n  store: IssueStoreInterface,\n|};\n\ntype State = {|\n  issues: Issue[],\n|};\n\nexport default class IssueCount extends React.Component<Props, State> {\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = `/repos/${props.repo.name}/issues`;\n\n    let issues: Issue[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['issues']) {\n      for (let i = 0; i < result['issues'].length; i++) {\n        issues.push(new Issue(result['issues'][i]));\n      }\n    }\n\n    this.state = {\n      issues: issues,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  async load() {\n    const issues = await this.props.store.list(this.props.repo.name)\n\n    this.props.cache.set(this.cacheKey, { issues: issues });\n    this.setState({ issues: issues });\n  }\n\n  render(): Node {\n    let priority: string = 'none';\n    const count = this.state.issues.length;\n\n    if (count > 0) {\n      priority = 'low';\n    }\n\n    if (count > 3) {\n      priority = 'medium';\n    }\n\n    if (count > 6) {\n      priority = 'high';\n    }\n\n    return (\n      <div className={`issue-count ${priority}`} aria-label='issue-count'>\n        <IssueOpenedIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport { DateTime } from 'luxon';\n\ntype Props = {|\n  id: number,\n  number: number,\n  title: string,\n  createdAt: string,\n  url: string,\n|};\n\nexport default class PullRequest {\n  id: number;\n  number: number;\n  title: string;\n  createdAt: DateTime;\n  url: string;\n\n  constructor(props: Props) {\n    this.id = props.id;\n    this.number = props.number;\n    this.title = props.title;\n    this.createdAt = DateTime.fromISO(props.createdAt);\n    this.url = props.url;\n  }\n}\n","// @flow\n\nimport PullRequest from '../models/pull_request';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class PullRequestStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<PullRequest[]> {\n    let path: string = `/repos/${repo}/pulls`;\n    let pullRequests: PullRequest[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const pullRequest of response.data) {\n        pullRequests.push(new PullRequest({\n          id: pullRequest.id,\n          number: pullRequest.number,\n          title: pullRequest.title,\n          createdAt: pullRequest.created_at,\n          url: pullRequest.html_url,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return pullRequests;\n  }\n};\n\nexport interface PullRequestStoreInterface {\n  list(repo: string): Promise<PullRequest[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../../styles/repo_list/pull_request_count.css';\nimport PullRequest from '../../models/pull_request';\nimport Repo from '../../models/repo';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { CacheInterface } from '../../lib/cache';\nimport { GitPullRequestIcon } from '@primer/octicons-react';\n\ntype Props = {|\n  repo: Repo,\n  cache: CacheInterface,\n  store: PullRequestStoreInterface,\n|};\n\ntype State = {|\n  pullRequests: PullRequest[],\n|};\n\nexport default class PullRequestCount extends React.Component<Props, State> {\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = `/repos/${props.repo.name}/pull_requests`;\n\n    let pullRequests: PullRequest[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['pull_requests']) {\n      for (let i = 0; i < result['pull_requests'].length; i++) {\n        pullRequests.push(new PullRequest(result['pull_requests'][i]));\n      }\n    }\n\n    this.state = {\n      pullRequests: pullRequests,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  async load() {\n    const pullRequests = await this.props.store.list(this.props.repo.name)\n\n    this.props.cache.set(this.cacheKey, { pull_requests: pullRequests });\n    this.setState({ pullRequests: pullRequests });\n  }\n\n  render(): Node {\n    let priority: string = 'none';\n    const count = this.state.pullRequests.length;\n\n    if (count > 0 ) {\n      priority = 'low';\n    }\n\n    if (count > 3 ) {\n      priority = 'medium';\n    }\n\n    if (count > 6 ) {\n      priority = 'high';\n    }\n\n    return (\n      <div className={`pull-request-count ${priority}`} aria-label='pull-request-count'>\n        <GitPullRequestIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../../styles/repo_list/repo_item.css';\nimport Repo from '../../models/repo';\nimport IssueCount from './issue_count';\nimport PullRequestCount from './pull_request_count';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { CacheInterface } from '../../lib/cache';\n\ntype Props = {|\n  repo: Repo,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  cache: CacheInterface,\n|};\n\nexport default class RepoItem extends React.Component<Props> {\n  shouldComponentUpdate(props: Props): boolean {\n    return !this.props.repo.isEqualTo(props.repo);\n  }\n\n  render(): Node {\n    const parts = this.props.repo.name.split('/');\n\n    const org = parts[0];\n    const repo = parts[1];\n\n    return (\n      <div className='repo-item'>\n        <div className='org'>{org}</div>\n        <a\n          className='repo'\n          href={this.props.repo.url}\n          target='_blank'\n          rel='noopener noreferrer'\n        >{repo}</a>\n        <div className='content'>\n          <IssueCount\n            repo={this.props.repo}\n            store={this.props.issueStore}\n            cache={this.props.cache}\n          />\n          <PullRequestCount\n            repo={this.props.repo}\n            store={this.props.pullRequestStore}\n            cache={this.props.cache}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport Repo from '../models/repo';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class RepoStore {\n  props: Props;\n\n  constructor(props: Props) {\n    this.props = props;\n  }\n\n  async list(org: string): Promise<Repo[]> {\n    let repos: Repo[] = [];\n    let path: string = `/orgs/${org}/repos`;\n\n    while (path) {\n      const response: GitHubClientResponse = await this.props.client.do({\n        method: 'GET',\n        path: path\n      });\n\n      for (const repo of response.data) {\n        repos.push(new Repo({\n          id: repo.id,\n          name: repo.full_name,\n          url: repo.html_url,\n          openIssuesCount: repo.open_issues_count,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return repos;\n  }\n}\n\nexport interface RepoStoreInterface {\n  list(org: string): Promise<Repo[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport Repo from '../../models/repo';\nimport RepoItem from './repo_item';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { RepoStoreInterface } from '../../stores/repo_store';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { TimerInterface } from '../../lib/timer';\nimport { CacheInterface } from '../../lib/cache';\nimport { SyncIcon } from '@primer/octicons-react';\nimport '../../styles/repo_list/index.css';\n\ntype Props = {|\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  timer: TimerInterface,\n  cache: CacheInterface,\n|};\n\ntype State = {|\n  loading: boolean,\n  repos: Repo[],\n|};\n\nexport default class RepoList extends React.Component<Props, State> {\n  handleReload: SyntheticEvent<HTMLButtonElement> => void;\n  interval: number;\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = '/repos';\n\n    let repos: Repo[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['repos']) {\n      for (let i = 0; i < result['repos'].length; i++) {\n        repos.push(new Repo(result['repos'][i]));\n      }\n    }\n\n    this.state = {\n      loading: repos.length === 0,\n      repos: repos,\n    };\n\n    this.handleReload = this.handleReload.bind(this);\n  }\n\n  componentDidMount() {\n    this.load();\n    this.interval = this.props.timer.setInterval(this.load.bind(this), 900000);\n  }\n\n  componentWillUnmount() {\n    this.props.timer.clearInterval(this.interval);\n  }\n\n  handleReload(event: SyntheticEvent<HTMLButtonElement>): void {\n    this.load();\n  }\n\n  async load() {\n    const results = await Promise.all([\n      this.props.repoStore.list('paketo-buildpacks'),\n      this.props.repoStore.list('paketo-community'),\n    ]);\n\n    let repos: Repo[] = [];\n\n    for (const result of results) {\n      for (const repo of result) {\n        repos.push(repo);\n      }\n    }\n\n    repos.sort((a: Repo, b: Repo): number => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.props.cache.set(this.cacheKey, { repos: repos });\n    this.setState({ loading: false, repos: repos });\n  }\n\n  render(): Node {\n    let items = (<div className='loading'>...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.repos.map((repo) => (\n        <RepoItem\n          key={repo.id}\n          repo={repo}\n          issueStore={this.props.issueStore}\n          pullRequestStore={this.props.pullRequestStore}\n          cache={this.props.cache}\n        />\n      ));\n    }\n\n    return (\n      <div className='repo-list'>\n        <div className='title'>\n          <h2>Overview</h2>\n          <button onClick={this.handleReload}>\n            <SyncIcon size={16} />\n          </button>\n        </div>\n        <div className='list'>\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport Issue from '../../models/issue';\nimport Repo from '../../models/repo';\nimport { CommentIcon } from '@primer/octicons-react';\nimport '../../styles/issue_list/issue_item.css';\n\ntype Props = {|\n  issue: Issue,\n  repo: Repo,\n|};\n\nexport default class IssueItem extends React.Component<Props> {\n  render(): Node {\n    const createdAtRelative = this.props.issue.createdAt.toRelative();\n    const createdAtDate = this.props.issue.createdAt.toLocaleString({ month: 'short', day: 'numeric', year: 'numeric' });\n\n    let commentCountClass = 'comment-count'\n    if (this.props.issue.commentCount === 0) {\n      commentCountClass += ' none';\n    }\n\n    return (\n      <div className='issue-item'>\n        <a\n          className='repo'\n          href={this.props.repo.url}\n          target='_blank'\n          rel='noopener noreferrer'\n        >{this.props.repo.name}</a>\n        <div className='content'>\n          <div className='identifier'>\n            <div className='number'>#{this.props.issue.number}</div>\n            <a\n              className='title'\n              href={this.props.issue.url}\n              target='_blank'\n              rel='noopener noreferrer'\n            >{this.props.issue.title}</a>\n          </div>\n          <div className={commentCountClass} aria-label='comment-count'>\n            <div className='count'>{this.props.issue.commentCount}</div>\n            <CommentIcon size={16} />\n          </div>\n        </div>\n        <div className='created-at'>opened {createdAtRelative} ({createdAtDate})</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\n\nimport { RepoStoreInterface } from '../../stores/repo_store';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { CacheInterface } from '../../lib/cache';\n\nimport Repo from '../../models/repo';\nimport Issue from '../../models/issue';\n\nimport IssueItem from './issue_item';\n\nimport '../../styles/issue_list/index.css';\n\ntype RepoIssue = {|\n  repo: Repo,\n  issue: Issue,\n|};\n\ntype Props = {|\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  cache: CacheInterface,\n|};\n\ntype State = {|\n  loading: boolean,\n  issues: RepoIssue[],\n|}\n\nexport default class IssueList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const issues: RepoIssue[] = [];\n    const cachedRepos = this.props.cache.get('/repos');\n\n    if (cachedRepos['repos']) {\n      for (let repo of cachedRepos['repos']) {\n        const cachedIssues = this.props.cache.get(`/repos/${repo.name}/issues`);\n        if (cachedIssues['issues']) {\n          for (let issue of cachedIssues['issues']) {\n            issues.push({\n              repo: repo,\n              issue: new Issue(issue),\n            });\n          }\n        }\n      }\n    }\n\n    issues.sort((a: RepoIssue, b: RepoIssue): number => {\n      const createdAtA = a.issue.createdAt.toMillis();\n      const createdAtB = b.issue.createdAt.toMillis();\n\n      if (createdAtA < createdAtB) {\n        return -1;\n      }\n\n      if (createdAtA > createdAtB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.state = {\n      loading: issues.length === 0,\n      issues: issues,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  async load() {\n    const reposByOrg = await Promise.all([\n      this.props.repoStore.list('paketo-buildpacks'),\n      this.props.repoStore.list('paketo-community'),\n    ]);\n\n    const repos: Repo[] = [];\n    const promises: Promise<Issue[]>[] = [];\n\n    for (let orgRepos: Repo[] of reposByOrg) {\n      for (let repo: Repo of orgRepos) {\n        repos.push(repo);\n\n        const promise = this.props.issueStore.list(repo.name);\n        promises.push(promise);\n      }\n    }\n\n    const issuesByRepo = await Promise.all(promises);\n    const issues: RepoIssue[] = [];\n\n    for (let i = 0; i < issuesByRepo.length; i++) {\n      const repoIssues: Issue[] = issuesByRepo[i];\n      const repo: Repo = repos[i];\n\n      this.props.cache.set(`/repos/${repo.name}/issues`, { issues: repoIssues });\n\n      for (let issue: Issue of repoIssues) {\n        issues.push({\n          repo: repo,\n          issue: issue,\n        });\n      }\n    }\n\n    repos.sort((a: Repo, b: Repo): number => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.props.cache.set('/repos', { repos: repos });\n\n    issues.sort((a: RepoIssue, b: RepoIssue): number => {\n      const createdAtA = a.issue.createdAt.toMillis();\n      const createdAtB = b.issue.createdAt.toMillis();\n\n      if (createdAtA < createdAtB) {\n        return -1;\n      }\n\n      if (createdAtA > createdAtB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.setState({ loading: false, issues: issues });\n  }\n\n  render(): Node {\n    let items: Node = (<div className='loading'>...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.issues.map(i => (\n        <IssueItem\n          key={i.issue.id}\n          issue={i.issue}\n          repo={i.repo}\n        />\n      ));\n    }\n\n    return (\n      <div className='issue-list'>\n        <div className='title'>\n          <h2>Open Issues</h2>\n          <div className='count'>({this.state.issues.length})</div>\n        </div>\n        <div className='list'>\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\n\nimport PullRequest from '../../models/pull_request';\nimport Repo from '../../models/repo';\n\nimport '../../styles/pull_request_list/pull_request_item.css';\n\ntype Props = {|\n  pullRequest: PullRequest,\n  repo: Repo,\n|};\n\nexport default class PullRequestItem extends React.Component<Props> {\n  render(): Node {\n    const createdAtRelative = this.props.pullRequest.createdAt.toRelative();\n    const createdAtDate = this.props.pullRequest.createdAt.toLocaleString({ month: 'short', day: 'numeric', year: 'numeric' });\n\n    return (\n      <div className='pull-request-item'>\n        <a\n          className='repo'\n          href={this.props.repo.url}\n          target='_blank'\n          rel='noopener noreferrer'\n        >{this.props.repo.name}</a>\n        <div className='content'>\n          <div className='identifier'>\n            <div className='number'>#{this.props.pullRequest.number}</div>\n            <a\n              className='title'\n              href={this.props.pullRequest.url}\n              target='_blank'\n              rel='noopener noreferrer'\n            >{this.props.pullRequest.title}</a>\n          </div>\n        </div>\n        <div className='created-at'>opened {createdAtRelative} ({createdAtDate})</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\n\nimport { CacheInterface } from '../../lib/cache';\nimport { RepoStoreInterface } from '../../stores/repo_store';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\n\nimport Repo from '../../models/repo';\nimport PullRequest from '../../models/pull_request';\n\nimport PullRequestItem from './pull_request_item';\n\nimport '../../styles/pull_request_list/index.css';\n\ntype RepoPullRequest = {|\n  repo: Repo,\n  pullRequest: PullRequest,\n|};\n\ntype Props = {|\n  cache: CacheInterface,\n  repoStore: RepoStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n|};\n\ntype State = {|\n  loading: boolean,\n  pullRequests: RepoPullRequest[],\n|};\n\nexport default class PullRequestList extends React.Component<Props,State> {\n  constructor(props: Props) {\n    super(props);\n\n    const pullRequests: RepoPullRequest[] = [];\n    const cachedRepos = this.props.cache.get('/repos');\n\n    if (cachedRepos['repos']) {\n      for (let repo of cachedRepos['repos']) {\n        const cachedPullRequests = this.props.cache.get(`/repos/${repo.name}/pull_requests`);\n        if (cachedPullRequests['pull_requests']) {\n          for (let pullRequest of cachedPullRequests['pull_requests']) {\n            pullRequests.push({\n              repo: repo,\n              pullRequest: new PullRequest(pullRequest),\n            });\n          }\n        }\n      }\n    }\n\n    this.state = {\n      loading: pullRequests.length === 0,\n      pullRequests: pullRequests,\n    }\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  async load() {\n    const reposByOrg = await Promise.all([\n      this.props.repoStore.list('paketo-buildpacks'),\n      this.props.repoStore.list('paketo-community'),\n    ]);\n\n    const repos: Repo[] = [];\n    const promises: Promise<PullRequest[]>[] = [];\n\n    for (let orgRepos: Repo[] of reposByOrg) {\n      for (let repo: Repo of orgRepos) {\n        repos.push(repo);\n\n        const promise = this.props.pullRequestStore.list(repo.name);\n        promises.push(promise);\n      }\n    }\n\n    const pullRequestsByRepo = await Promise.all(promises);\n    const pullRequests: RepoPullRequest[] = [];\n\n    for (let i = 0; i < pullRequestsByRepo.length; i++) {\n      const repoPullRequests: PullRequest[] = pullRequestsByRepo[i];\n      const repo: Repo = repos[i];\n\n      this.props.cache.set(`/repos/${repo.name}/pull_requests`, { pull_requests: repoPullRequests });\n\n      for (let pullRequest: PullRequest of repoPullRequests) {\n        pullRequests.push({\n          repo: repo,\n          pullRequest: pullRequest,\n        });\n      }\n    }\n\n    repos.sort((a: Repo, b: Repo): number => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.props.cache.set('/repos', { repos: repos });\n\n    pullRequests.sort((a: RepoPullRequest, b: RepoPullRequest): number => {\n      const createdAtA = a.pullRequest.createdAt.toMillis();\n      const createdAtB = b.pullRequest.createdAt.toMillis();\n\n      if (createdAtA < createdAtB) {\n        return -1;\n      }\n\n      if (createdAtA > createdAtB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.setState({ loading: false, pullRequests: pullRequests });\n  }\n\n  render(): Node {\n    let items: Node = (<div className='loading'>...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.pullRequests.map(pr => (\n        <PullRequestItem\n          key={pr.pullRequest.id}\n          pullRequest={pr.pullRequest}\n          repo={pr.repo}\n        />\n      ));\n    }\n\n    return (\n      <div className='pull-request-list'>\n        <div className='title'>\n          <h2> Open Pull Requests</h2>\n          <div className='count'>({this.state.pullRequests.length})</div>\n        </div>\n        <div className='list'>\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './lib/private_route';\n\nimport '../styles/app.css';\n\nimport Header from './header';\nimport Login from './login';\nimport RepoList from './repo_list';\nimport IssueList from './issue_list';\nimport PullRequestList from './pull_request_list';\n\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\nimport { TimerInterface } from '../lib/timer';\nimport { CacheInterface } from '../lib/cache';\nimport { StorageInterface } from '../lib/storage';\n\ntype Props = {|\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  timer: TimerInterface,\n  cache: CacheInterface,\n  storage: StorageInterface,\n|};\n\ntype State = {|\n  authenticated: boolean,\n|};\n\nclass App extends React.Component<Props, State> {\n  assignToken: string => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { authenticated: !!this.props.storage.getItem('token') };\n\n    this.assignToken = this.assignToken.bind(this);\n  }\n\n  assignToken(token: string): void {\n    this.props.storage.setItem('token', token);\n    this.setState({ authenticated: !!this.props.storage.getItem('token') });\n  }\n\n  render(): Node {\n    let root = '';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <section className=\"body\">\n          <Switch>\n\n            <Route path={`${root}/login`} render={({ history, location }) =>\n              <Login\n                assignToken={this.assignToken}\n                history={history}\n                location={location}\n              />}\n            />\n\n            <PrivateRoute path={`${root}/issues`} authenticated={this.state.authenticated}>\n              <IssueList\n                cache={this.props.cache}\n                repoStore={this.props.repoStore}\n                issueStore={this.props.issueStore}\n              />\n            </PrivateRoute>\n\n            <PrivateRoute path={`${root}/pull-requests`} authenticated={this.state.authenticated}>\n              <PullRequestList\n                cache={this.props.cache}\n                repoStore={this.props.repoStore}\n                pullRequestStore={this.props.pullRequestStore}\n              />\n            </PrivateRoute>\n\n            <PrivateRoute path={`${root}/`} authenticated={this.state.authenticated}>\n              <RepoList\n                repoStore={this.props.repoStore}\n                issueStore={this.props.issueStore}\n                pullRequestStore={this.props.pullRequestStore}\n                timer={this.props.timer}\n                cache={this.props.cache}\n              />\n            </PrivateRoute>\n\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './components';\n\nimport GitHubClient from './lib/github_client';\nimport RepoStore from './stores/repo_store';\nimport IssueStore from './stores/issue_store';\nimport PullRequestStore from './stores/pull_request_store';\nimport Cache from './lib/cache';\n\nconst storage = window.localStorage;\nconst timer = window;\nconst cache = new Cache({ storage: storage });\n\nconst gitHubClient = new GitHubClient({ storage: storage });\nconst repoStore = new RepoStore({ client: gitHubClient });\nconst issueStore = new IssueStore({ client: gitHubClient });\nconst pullRequestStore = new PullRequestStore({ client: gitHubClient });\n\nReactDOM.render(\n  <BrowserRouter>\n    <App\n      repoStore={repoStore}\n      issueStore={issueStore}\n      pullRequestStore={pullRequestStore}\n      timer={timer}\n      cache={cache}\n      storage={storage}\n    />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}