{"version":3,"sources":["serviceWorker.js","components/private_route.js","components/header.js","components/login.js","models/repo.js","models/issue.js","github/client.js","stores/issue_store.js","components/issue_count.js","models/pull_request.js","stores/pull_request_store.js","components/pull_request_count.js","components/repo_item.js","stores/repo_store.js","components/repo_list.js","components/app.js","index.js"],"names":["Boolean","window","location","hostname","match","PrivateRoute","root","process","path","this","props","render","authenticated","children","to","pathname","state","from","React","Component","Header","logoURL","src","className","alt","Login","token","handleChange","bind","handleSubmit","event","input","currentTarget","setState","value","preventDefault","assignToken","history","replace","onSubmit","htmlFor","type","id","onChange","Repo","key","btoa","name","url","openIssuesCount","Issue","number","GitHubClient","storage","getItem","setItem","request","octokit","Octokit","auth","method","result","IssueStore","client","repo","issues","do","response","data","issue","pull_request","push","headers","link","IssueCount","loading","load","previousProps","store","list","then","count","priority","length","aria-label","size","PullRequest","PullRequestStore","pullRequests","pullRequest","PullRequestCount","RepoItem","parts","split","org","href","target","rel","issueStore","pullRequestStore","RepoStore","repos","full_name","html_url","open_issues_count","RepoList","handleReload","Promise","all","results","sort","a","b","nameA","toUpperCase","nameB","items","map","onClick","App","gitHubClient","repoStore","localStorage","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e2606bb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ntype Props = {\n  children: Node,\n  authenticated: boolean,\n  path: string,\n};\n\nexport default class PrivateRoute extends React.Component<Props> {\n  render(): Node {\n    let root = \"\";\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <Route\n        path={this.props.path}\n        render={({ location }) =>\n          this.props.authenticated ? (this.props.children) : (\n            <Redirect to={ { pathname: `${root}/login`, state: { from: location } } } />\n          )\n        }\n      />\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\n\ntype Props = {};\n\nclass Header extends React.Component<Props> {\n  render(): Node {\n    let logoURL = '/logo512.png';\n    if (process.env.PUBLIC_URL) {\n      logoURL = `${process.env.PUBLIC_URL}/logo512.png`;\n    }\n\n    return (\n      <header>\n        <img src={logoURL} className=\"logo\" alt=\"logo\" />\n        <h1>Paketo Buildpacks</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/login.css';\n\ntype Props = {\n  assignToken: string => void,\n  history: {\n    replace: { pathname: string } => void,\n  },\n  location: { state: { from: { pathname: string } } },\n};\n\ntype State = {\n  token: string,\n  from: { pathname: string },\n};\n\nclass Login extends React.Component<Props, State> {\n  handleChange: SyntheticEvent<HTMLInputElement> => void;\n  handleSubmit: SyntheticEvent<HTMLFormElement> => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    const { from } = this.props.location.state || { from: { pathname: \"/\" } };\n    this.state = { token: '', from: from };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: SyntheticEvent<HTMLInputElement>): void {\n    const input = (event.currentTarget: HTMLInputElement);\n    this.setState({ token: input.value });\n  }\n\n  handleSubmit(event: SyntheticEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    this.props.assignToken(this.state.token);\n    this.props.history.replace(this.state.from);\n  }\n\n  render(): Node {\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"token\">GitHub Personal Access Token</label>\n        <input type=\"text\" id=\"token\" value={this.state.token} onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","// @flow\n\ntype Props = {\n  name: string,\n  url: string,\n  openIssuesCount: number,\n};\n\nclass Repo {\n  key: string;\n  name: string;\n  url: string;\n  openIssuesCount: number;\n\n  constructor(props: Props) {\n    this.key = btoa(props.name);\n    this.name = props.name;\n    this.url = props.url;\n    this.openIssuesCount = props.openIssuesCount;\n  }\n}\n\nexport default Repo;\n","// @flow\n\ntype Props = {\n  number: number,\n};\n\nexport default class Issue {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport { Octokit } from '@octokit/rest';\n\nexport type GitHubClientRequest = {\n  method: string,\n  path: string,\n};\n\nexport type GitHubClientResponse = {\n  data: any[];\n  headers: {\n    link: ?string,\n  },\n};\n\ninterface Storage {\n  getItem(key: string): ?string;\n  setItem(key: string, value: string): void;\n};\n\ntype Props = {\n  storage: Storage,\n};\n\nexport default class GitHubClient {\n  storage: Storage;\n\n  assignToken: string => void;\n  authenticated: void => boolean;\n\n  constructor(props: Props) {\n    this.storage = props.storage;\n\n    this.assignToken = this.assignToken.bind(this);\n    this.authenticated = this.authenticated.bind(this);\n  }\n\n  authenticated(): boolean {\n    return !!this.storage.getItem('token');\n  }\n\n  assignToken(token: string) {\n    this.storage.setItem('token', token);\n  }\n\n  async do(request: GitHubClientRequest): Promise<GitHubClientResponse> {\n    const octokit = new Octokit({ auth: this.storage.getItem('token') });\n    const result = await octokit.request(`${request.method} ${request.path}`);\n\n    return result;\n  }\n}\n\nexport interface GitHubClientInterface {\n  assignToken(token: string): void;\n  authenticated(): boolean;\n  do(GitHubClientRequest): Promise<GitHubClientResponse>;\n};\n","// @flow\n\nimport Issue from '../models/issue';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class IssueStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<Issue[]> {\n    let path: string = `/repos/${repo}/issues`;\n    let issues: Issue[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const issue of response.data) {\n        if (!issue.pull_request) {\n          issues.push(new Issue({\n            number: issue.number,\n          }));\n        }\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return issues;\n  }\n};\n\nexport interface IssueStoreInterface {\n  list(repo: string): Promise<Issue[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../styles/issue_count.css';\nimport Issue from '../models/issue';\nimport Repo from '../models/repo';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { IssueOpenedIcon } from '@primer/octicons-react';\n\ntype Props = {\n  store: IssueStoreInterface,\n  repo: Repo,\n};\n\ntype State = {\n  loading: boolean,\n  issues: Issue[],\n};\n\nexport default class IssueCount extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      issues: [],\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  load() {\n    this.props.store.list(this.props.repo.name).then((issues) => {\n      this.setState({ loading: false, issues: issues });\n    });\n  }\n\n  render(): Node {\n    let count: Node = '...';\n    let priority: string = 'none';\n\n    if (!this.state.loading) {\n      const length = this.state.issues.length;\n\n      if (length > 0) {\n        priority = 'low';\n      }\n\n      if (length > 3) {\n        priority = 'medium';\n      }\n\n      if (length > 6) {\n        priority = 'high';\n      }\n\n      count = `${length}`;\n    }\n\n    return (\n      <div className={`issue-count ${priority}`} aria-label='issue-count'>\n        <IssueOpenedIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\ntype Props = {\n  number: number,\n};\n\nexport default class PullRequest {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport PullRequest from '../models/pull_request';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class PullRequestStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<PullRequest[]> {\n    let path: string = `/repos/${repo}/pulls`;\n    let pullRequests: PullRequest[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const pullRequest of response.data) {\n        pullRequests.push(new PullRequest({\n          number: pullRequest.number,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return pullRequests;\n  }\n};\n\nexport interface PullRequestStoreInterface {\n  list(repo: string): Promise<PullRequest[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../styles/pull_request_count.css';\nimport PullRequest from '../models/pull_request';\nimport Repo from '../models/repo';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\nimport { GitPullRequestIcon } from '@primer/octicons-react';\n\ntype Props = {\n  store: PullRequestStoreInterface,\n  repo: Repo,\n};\n\ntype State = {\n  loading: boolean,\n  pullRequests: PullRequest[],\n};\n\nexport default class PullRequestCount extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      pullRequests: [],\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  load() {\n    this.props.store.list(this.props.repo.name).then((pullRequests) => {\n      this.setState({ loading: false, pullRequests: pullRequests });\n    });\n  }\n\n  render(): Node {\n    let count: string = '...';\n    let priority: string = 'none';\n\n    if (!this.state.loading) {\n      const length = this.state.pullRequests.length;\n\n      if (length > 0 ) {\n        priority = 'low';\n      }\n\n      if (length > 3 ) {\n        priority = 'medium';\n      }\n\n      if (length > 6 ) {\n        priority = 'high';\n      }\n\n      count = `${length}`;\n    }\n\n    return (\n      <div className={`pull-request-count ${priority}`} aria-label='pull-request-count'>\n        <GitPullRequestIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/repo_item.css';\nimport Repo from '../models/repo';\nimport IssueCount from './issue_count';\nimport PullRequestCount from './pull_request_count';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\n\ntype Props = {\n  repo: Repo,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\nexport default class RepoItem extends React.Component<Props> {\n  render(): Node {\n    const parts = this.props.repo.name.split('/');\n\n    const org = parts[0];\n    const repo = parts[1];\n\n    return (\n      <div className=\"repo-item\">\n        <div className=\"org\">{org}</div>\n        <a\n          className=\"repo\"\n          href={this.props.repo.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >{repo}</a>\n        <div className=\"content\">\n          <IssueCount\n            store={this.props.issueStore}\n            repo={this.props.repo}\n          />\n          <PullRequestCount\n            store={this.props.pullRequestStore}\n            repo={this.props.repo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport Repo from '../models/repo';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class RepoStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(org: string): Promise<Repo[]> {\n    let repos: Repo[] = [];\n    let path: string = `/orgs/${org}/repos`;\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path\n      });\n\n      for (const repo of response.data) {\n        repos.push(new Repo({\n          name: repo.full_name,\n          url: repo.html_url,\n          openIssuesCount: repo.open_issues_count,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return repos;\n  }\n}\n\nexport interface RepoStoreInterface {\n  list(org: string): Promise<Repo[]>;\n};\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/repo_list.css';\nimport Repo from '../models/repo';\nimport RepoItem from './repo_item';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\nimport { SyncIcon } from '@primer/octicons-react';\n\ntype Props = {\n  store: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\ntype State = {\n  loading: boolean,\n  repos: Repo[],\n};\n\nclass RepoList extends React.Component<Props, State> {\n  handleReload: SyntheticEvent<HTMLButtonElement> => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      repos: [],\n    };\n\n    this.handleReload = this.handleReload.bind(this);\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  load() {\n    Promise.all([\n      this.props.store.list('paketo-buildpacks'),\n      this.props.store.list('paketo-community'),\n    ]).then((results) => {\n      let repos: Repo[] = [];\n\n      for (const result of results) {\n        for (const repo of result) {\n          repos.push(repo);\n        }\n      }\n\n      repos.sort((a: Repo, b: Repo): number => {\n        const nameA = a.name.toUpperCase();\n        const nameB = b.name.toUpperCase();\n\n        if (nameA < nameB) {\n          return -1;\n        }\n\n        if (nameA > nameB) {\n          return 1;\n        }\n\n        return 0;\n      });\n\n      this.setState({ loading: false, repos: repos });\n    });\n  }\n\n  handleReload(event: SyntheticEvent<HTMLButtonElement>): void {\n    this.load();\n  }\n\n  render(): Node {\n    let items = (<div className=\"loading\">...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.repos.map((repo) => (\n        <RepoItem\n          key={repo.key}\n          repo={repo}\n          issueStore={this.props.issueStore}\n          pullRequestStore={this.props.pullRequestStore}\n        />\n      ));\n    }\n\n    return (\n      <div className=\"repo-list\">\n        <div className=\"title\">\n          <h2>Overview</h2>\n          <button onClick={this.handleReload}>\n            <SyncIcon size={16} />\n          </button>\n        </div>\n        <div className=\"list\">\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RepoList;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './private_route';\n\nimport '../styles/app.css';\n\nimport Header from './header';\nimport Login from './login';\nimport RepoList from './repo_list';\n\nimport { GitHubClientInterface } from '../github/client';\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\n\ntype Props = {\n  gitHubClient: GitHubClientInterface,\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\ntype State = {\n  authenticated: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  assignToken: string => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { authenticated: this.props.gitHubClient.authenticated() };\n\n    this.assignToken = this.assignToken.bind(this);\n  }\n\n  assignToken(token: string): void {\n    this.props.gitHubClient.assignToken(token);\n    this.setState({ authenticated: this.props.gitHubClient.authenticated() });\n  }\n\n  render(): Node {\n    let root = \"\";\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <section className=\"body\">\n          <Switch>\n\n            <Route path={`${root}/login`} render={({ history, location }) =>\n              <Login\n                assignToken={this.assignToken}\n                history={history}\n                location={location}\n              />}\n            />\n\n            <PrivateRoute path={`${root}/`} authenticated={this.state.authenticated}>\n              <RepoList\n                store={this.props.repoStore}\n                issueStore={this.props.issueStore}\n                pullRequestStore={this.props.pullRequestStore}\n              />\n            </PrivateRoute>\n\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './components/app';\n\nimport GitHubClient from './github/client';\nimport RepoStore from './stores/repo_store';\nimport IssueStore from './stores/issue_store';\nimport PullRequestStore from './stores/pull_request_store';\n\nconst storage = window.localStorage;\nconst gitHubClient = new GitHubClient({ storage: storage });\nconst repoStore = new RepoStore({ client: gitHubClient });\nconst issueStore = new IssueStore({ client: gitHubClient });\nconst pullRequestStore = new PullRequestStore({ client: gitHubClient });\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App\n        gitHubClient={gitHubClient}\n        repoStore={repoStore}\n        issueStore={issueStore}\n        pullRequestStore={pullRequestStore}\n      />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}