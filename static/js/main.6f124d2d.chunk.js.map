{"version":3,"sources":["serviceWorker.js","components/lib/private_route.js","components/header.js","components/login.js","models/repo.js","models/issue.js","lib/github_client.js","stores/issue_store.js","lib/cache.js","components/repo_list/issue_count.js","models/pull_request.js","stores/pull_request_store.js","components/repo_list/pull_request_count.js","components/repo_list/repo_item.js","stores/repo_store.js","components/repo_list/index.js","components/index.js","index.js"],"names":["Boolean","window","location","hostname","match","PrivateRoute","root","process","path","this","props","render","authenticated","children","to","pathname","state","from","React","Component","Header","src","className","alt","Login","token","handleChange","bind","handleSubmit","event","input","currentTarget","setState","value","preventDefault","assignToken","history","replace","onSubmit","htmlFor","type","id","onChange","Repo","key","btoa","name","url","openIssuesCount","repo","Issue","number","GitHubClient","storage","request","getItem","startsWith","fetch","method","headers","response","link","get","json","data","IssueStore","client","issues","do","issue","pull_request","push","Cache","_key","setItem","JSON","stringify","parse","IssueCount","cacheKey","result","cache","i","length","load","previousProps","store","list","set","priority","count","aria-label","size","PullRequest","PullRequestStore","pullRequests","pullRequest","PullRequestCount","pull_requests","RepoItem","isEqualTo","parts","split","org","href","target","rel","issueStore","pullRequestStore","RepoStore","repos","full_name","html_url","open_issues_count","RepoList","loading","handleReload","interval","timer","setInterval","clearInterval","Promise","all","results","sort","a","b","nameA","toUpperCase","nameB","items","map","onClick","App","repoStore","localStorage","gitHubClient","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f124d2d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ntype Props = {|\n  children: Node,\n  authenticated: boolean,\n  path: string,\n|};\n\nexport default class PrivateRoute extends React.Component<Props> {\n  render(): Node {\n    let root = \"\";\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <Route\n        path={this.props.path}\n        render={({ location }) =>\n          this.props.authenticated ? (this.props.children) : (\n            <Redirect to={ { pathname: `${root}/login`, state: { from: location } } } />\n          )\n        }\n      />\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/header.css';\n\ntype Props = {||};\n\nclass Header extends React.Component<Props> {\n  render(): Node {\n    let root = '';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <header>\n        <h1>\n          <Link to={root}>\n            <img src={`${root}/logo512.png`} className=\"logo\" alt=\"logo\" />\n            Paketo Buildpacks\n          </Link>\n        </h1>\n        <div className=\"navigation\">\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/login.css';\n\ntype Props = {|\n  assignToken: string => void,\n  history: {\n    replace: { pathname: string } => void,\n  },\n  location: { state: { from: { pathname: string } } },\n|};\n\ntype State = {|\n  token: string,\n  from: { pathname: string },\n|};\n\nclass Login extends React.Component<Props, State> {\n  handleChange: SyntheticEvent<HTMLInputElement> => void;\n  handleSubmit: SyntheticEvent<HTMLFormElement> => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    let root = '/';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    const { from } = this.props.location.state || { from: { pathname: root } };\n    this.state = { token: '', from: from };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: SyntheticEvent<HTMLInputElement>): void {\n    const input = (event.currentTarget: HTMLInputElement);\n    this.setState({ token: input.value });\n  }\n\n  handleSubmit(event: SyntheticEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    this.props.assignToken(this.state.token);\n    this.props.history.replace(this.state.from);\n  }\n\n  render(): Node {\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"token\">GitHub Personal Access Token</label>\n        <input type=\"text\" id=\"token\" value={this.state.token} onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","// @flow\n\ntype Props = {|\n  name: string,\n  url: string,\n  openIssuesCount: number,\n|};\n\nclass Repo {\n  key: string;\n  name: string;\n  url: string;\n  openIssuesCount: number;\n\n  constructor(props: Props) {\n    this.key = btoa(props.name);\n    this.name = props.name;\n    this.url = props.url;\n    this.openIssuesCount = props.openIssuesCount;\n  }\n\n  isEqualTo(repo: Repo): boolean {\n    return repo.name === this.name &&\n      repo.url === this.url &&\n      repo.openIssuesCount === this.openIssuesCount\n  }\n}\n\nexport default Repo;\n","// @flow\n\ntype Props = {|\n  number: number,\n|};\n\nexport default class Issue {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport { StorageInterface } from '../lib/storage';\n\nexport type GitHubClientRequest = {\n  method: string,\n  path: string,\n};\n\nexport type GitHubClientResponse = {\n  data: any[];\n  headers: {\n    link: ?string,\n  },\n};\n\ntype Props = {|\n  storage: StorageInterface,\n|};\n\nexport default class GitHubClient {\n  storage: StorageInterface;\n  worker: {\n    do: (token: ?string, method: string, path: string) => Promise<GitHubClientResponse>\n  };\n\n  constructor(props: Props) {\n    this.storage = props.storage;\n  }\n\n  async do(request: GitHubClientRequest): Promise<GitHubClientResponse> {\n    const token = this.storage.getItem('token') || '';\n\n    let url = request.path\n    if (url.startsWith('/')) {\n      url = `https://api.github.com${url}`;\n    }\n\n    const response = await fetch(url, {\n      method: request.method,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    })\n\n    const link = response.headers.get('Link');\n    const data = await response.json();\n\n    return {\n      data: data,\n      headers: {\n        link: link,\n      },\n    };\n  }\n}\n\nexport interface GitHubClientInterface {\n  do(GitHubClientRequest): Promise<GitHubClientResponse>;\n};\n","// @flow\n\nimport Issue from '../models/issue';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class IssueStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<Issue[]> {\n    let path: string = `/repos/${repo}/issues`;\n    let issues: Issue[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const issue of response.data) {\n        if (!issue.pull_request) {\n          issues.push(new Issue({\n            number: issue.number,\n          }));\n        }\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return issues;\n  }\n};\n\nexport interface IssueStoreInterface {\n  list(repo: string): Promise<Issue[]>;\n};\n","// @flow\n\nimport { StorageInterface } from './storage';\n\ntype Props = {|\n  storage: StorageInterface,\n|};\n\nexport default class Cache {\n  props: Props;\n\n  constructor(props: Props) {\n    this.props = props;\n  }\n\n  set(key: string, value: { [key: string]: any}): void {\n    key = this._key(key);\n\n    this.props.storage.setItem(key, JSON.stringify(value));\n  }\n\n  get(key: string): { [key: string]: any} {\n    key = this._key(key);\n\n    const value = this.props.storage.getItem(key);\n\n    if (!value) {\n      return {};\n    }\n\n    return JSON.parse(value);\n  }\n\n  _key(key: string): string {\n    key = key.replace(/^(\\/)/,\"\");\n    return `/cache/${key}`;\n  }\n}\n\nexport interface CacheInterface {\n  get(key: string): { [key: string]: any};\n  set(key: string, value: { [key: string]: any}): void;\n}\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../../styles/repo_list/issue_count.css';\nimport Issue from '../../models/issue';\nimport Repo from '../../models/repo';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { CacheInterface } from '../../lib/cache';\nimport { IssueOpenedIcon } from '@primer/octicons-react';\n\ntype Props = {|\n  repo: Repo,\n  cache: CacheInterface,\n  store: IssueStoreInterface,\n|};\n\ntype State = {|\n  issues: Issue[],\n|};\n\nexport default class IssueCount extends React.Component<Props, State> {\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = `/repos/${props.repo.name}/issues`;\n\n    let issues: Issue[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['issues']) {\n      for (let i = 0; i < result['issues'].length; i++) {\n        issues.push(new Issue(result['issues'][i]));\n      }\n    }\n\n    this.state = {\n      issues: issues,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  async load() {\n    const issues = await this.props.store.list(this.props.repo.name)\n\n    this.props.cache.set(this.cacheKey, { issues: issues });\n    this.setState({ issues: issues });\n  }\n\n  render(): Node {\n    let priority: string = 'none';\n    const count = this.state.issues.length;\n\n    if (count > 0) {\n      priority = 'low';\n    }\n\n    if (count > 3) {\n      priority = 'medium';\n    }\n\n    if (count > 6) {\n      priority = 'high';\n    }\n\n    return (\n      <div className={`issue-count ${priority}`} aria-label='issue-count'>\n        <IssueOpenedIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\ntype Props = {|\n  number: number,\n|};\n\nexport default class PullRequest {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport PullRequest from '../models/pull_request';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class PullRequestStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<PullRequest[]> {\n    let path: string = `/repos/${repo}/pulls`;\n    let pullRequests: PullRequest[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const pullRequest of response.data) {\n        pullRequests.push(new PullRequest({\n          number: pullRequest.number,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return pullRequests;\n  }\n};\n\nexport interface PullRequestStoreInterface {\n  list(repo: string): Promise<PullRequest[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../../styles/repo_list/pull_request_count.css';\nimport PullRequest from '../../models/pull_request';\nimport Repo from '../../models/repo';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { CacheInterface } from '../../lib/cache';\nimport { GitPullRequestIcon } from '@primer/octicons-react';\n\ntype Props = {|\n  repo: Repo,\n  cache: CacheInterface,\n  store: PullRequestStoreInterface,\n|};\n\ntype State = {|\n  pullRequests: PullRequest[],\n|};\n\nexport default class PullRequestCount extends React.Component<Props, State> {\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = `/repos/${props.repo.name}/pull_requests`;\n\n    let pullRequests: PullRequest[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['pull_requests']) {\n      for (let i = 0; i < result['pull_requests'].length; i++) {\n        pullRequests.push(new PullRequest(result['pull_requests'][i]));\n      }\n    }\n\n    this.state = {\n      pullRequests: pullRequests,\n    };\n  }\n\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (this.props.repo.openIssuesCount !== previousProps.repo.openIssuesCount) {\n      this.load();\n    }\n  }\n\n  async load() {\n    const pullRequests = await this.props.store.list(this.props.repo.name)\n\n    this.props.cache.set(this.cacheKey, { pull_requests: pullRequests });\n    this.setState({ pullRequests: pullRequests });\n  }\n\n  render(): Node {\n    let priority: string = 'none';\n    const count = this.state.pullRequests.length;\n\n    if (count > 0 ) {\n      priority = 'low';\n    }\n\n    if (count > 3 ) {\n      priority = 'medium';\n    }\n\n    if (count > 6 ) {\n      priority = 'high';\n    }\n\n    return (\n      <div className={`pull-request-count ${priority}`} aria-label='pull-request-count'>\n        <GitPullRequestIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../../styles/repo_list/repo_item.css';\nimport Repo from '../../models/repo';\nimport IssueCount from './issue_count';\nimport PullRequestCount from './pull_request_count';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { CacheInterface } from '../../lib/cache';\n\ntype Props = {|\n  repo: Repo,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  cache: CacheInterface,\n|};\n\nexport default class RepoItem extends React.Component<Props> {\n  shouldComponentUpdate(props: Props): boolean {\n    return !this.props.repo.isEqualTo(props.repo);\n  }\n\n  render(): Node {\n    const parts = this.props.repo.name.split('/');\n\n    const org = parts[0];\n    const repo = parts[1];\n\n    return (\n      <div className=\"repo-item\">\n        <div className=\"org\">{org}</div>\n        <a\n          className=\"repo\"\n          href={this.props.repo.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >{repo}</a>\n        <div className=\"content\">\n          <IssueCount\n            repo={this.props.repo}\n            store={this.props.issueStore}\n            cache={this.props.cache}\n          />\n          <PullRequestCount\n            repo={this.props.repo}\n            store={this.props.pullRequestStore}\n            cache={this.props.cache}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport Repo from '../models/repo';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../lib/github_client';\n\ntype Props = {|\n  client: GitHubClientInterface,\n|};\n\nexport default class RepoStore {\n  props: Props;\n\n  constructor(props: Props) {\n    this.props = props;\n  }\n\n  async list(org: string): Promise<Repo[]> {\n    let repos: Repo[] = [];\n    let path: string = `/orgs/${org}/repos`;\n\n    while (path) {\n      const response: GitHubClientResponse = await this.props.client.do({\n        method: 'GET',\n        path: path\n      });\n\n      for (const repo of response.data) {\n        repos.push(new Repo({\n          name: repo.full_name,\n          url: repo.html_url,\n          openIssuesCount: repo.open_issues_count,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return repos;\n  }\n}\n\nexport interface RepoStoreInterface {\n  list(org: string): Promise<Repo[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport Repo from '../../models/repo';\nimport RepoItem from './repo_item';\nimport { IssueStoreInterface } from '../../stores/issue_store';\nimport { RepoStoreInterface } from '../../stores/repo_store';\nimport { PullRequestStoreInterface } from '../../stores/pull_request_store';\nimport { TimerInterface } from '../../lib/timer';\nimport { CacheInterface } from '../../lib/cache';\nimport { SyncIcon } from '@primer/octicons-react';\nimport '../../styles/repo_list/index.css';\n\ntype Props = {|\n  store: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  timer: TimerInterface,\n  cache: CacheInterface,\n|};\n\ntype State = {|\n  loading: boolean,\n  repos: Repo[],\n|};\n\nexport default class RepoList extends React.Component<Props, State> {\n  handleReload: SyntheticEvent<HTMLButtonElement> => void;\n  interval: number;\n  cacheKey: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.cacheKey = '/repos';\n\n    let repos: Repo[] = [];\n    const result = this.props.cache.get(this.cacheKey);\n\n    if (result['repos']) {\n      for (let i = 0; i < result['repos'].length; i++) {\n        repos.push(new Repo(result['repos'][i]));\n      }\n    }\n\n\n    this.state = {\n      loading: repos.length === 0,\n      repos: repos,\n    };\n\n    this.handleReload = this.handleReload.bind(this);\n  }\n\n  componentDidMount() {\n    this.load();\n    this.interval = this.props.timer.setInterval(this.load.bind(this), 900000);\n  }\n\n  componentWillUnmount() {\n    this.props.timer.clearInterval(this.interval);\n  }\n\n  handleReload(event: SyntheticEvent<HTMLButtonElement>): void {\n    this.load();\n  }\n\n  async load() {\n    const results = await Promise.all([\n      this.props.store.list('paketo-buildpacks'),\n      this.props.store.list('paketo-community'),\n    ]);\n\n    let repos: Repo[] = [];\n\n    for (const result of results) {\n      for (const repo of result) {\n        repos.push(repo);\n      }\n    }\n\n    repos.sort((a: Repo, b: Repo): number => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.props.cache.set(this.cacheKey, { repos: repos });\n    this.setState({ loading: false, repos: repos });\n  }\n\n  render(): Node {\n    let items = (<div className='loading'>...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.repos.map((repo) => (\n        <RepoItem\n          key={repo.key}\n          repo={repo}\n          issueStore={this.props.issueStore}\n          pullRequestStore={this.props.pullRequestStore}\n          cache={this.props.cache}\n        />\n      ));\n    }\n\n    return (\n      <div className='repo-list'>\n        <div className='title'>\n          <h2>Overview</h2>\n          <button onClick={this.handleReload}>\n            <SyncIcon size={16} />\n          </button>\n        </div>\n        <div className='list'>\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './lib/private_route';\n\nimport '../styles/app.css';\n\nimport Header from './header';\nimport Login from './login';\nimport RepoList from './repo_list';\n\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\nimport { TimerInterface } from '../lib/timer';\nimport { CacheInterface } from '../lib/cache';\nimport { StorageInterface } from '../lib/storage';\n\ntype Props = {|\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n  timer: TimerInterface,\n  cache: CacheInterface,\n  storage: StorageInterface,\n|};\n\ntype State = {|\n  authenticated: boolean,\n|};\n\nclass App extends React.Component<Props, State> {\n  assignToken: string => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { authenticated: !!this.props.storage.getItem('token') };\n\n    this.assignToken = this.assignToken.bind(this);\n  }\n\n  assignToken(token: string): void {\n    this.props.storage.setItem('token', token);\n    this.setState({ authenticated: !!this.props.storage.getItem('token') });\n  }\n\n  render(): Node {\n    let root = '';\n    if (process.env.PUBLIC_URL) {\n      root = process.env.PUBLIC_URL;\n    }\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <section className=\"body\">\n          <Switch>\n\n            <Route path={`${root}/login`} render={({ history, location }) =>\n              <Login\n                assignToken={this.assignToken}\n                history={history}\n                location={location}\n              />}\n            />\n\n            <PrivateRoute path={`${root}/`} authenticated={this.state.authenticated}>\n              <RepoList\n                store={this.props.repoStore}\n                issueStore={this.props.issueStore}\n                pullRequestStore={this.props.pullRequestStore}\n                timer={this.props.timer}\n                cache={this.props.cache}\n              />\n            </PrivateRoute>\n\n          </Switch>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './components';\n\nimport GitHubClient from './lib/github_client';\nimport RepoStore from './stores/repo_store';\nimport IssueStore from './stores/issue_store';\nimport PullRequestStore from './stores/pull_request_store';\nimport Cache from './lib/cache';\n\nconst storage = window.localStorage;\nconst timer = window;\nconst cache = new Cache({ storage: storage });\n\nconst gitHubClient = new GitHubClient({ storage: storage });\nconst repoStore = new RepoStore({ client: gitHubClient });\nconst issueStore = new IssueStore({ client: gitHubClient });\nconst pullRequestStore = new PullRequestStore({ client: gitHubClient });\n\nReactDOM.render(\n  <BrowserRouter>\n    <App\n      repoStore={repoStore}\n      issueStore={issueStore}\n      pullRequestStore={pullRequestStore}\n      timer={timer}\n      cache={cache}\n      storage={storage}\n    />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}