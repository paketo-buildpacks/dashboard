{"version":3,"sources":["serviceWorker.js","components/header.js","components/login.js","models/repo.js","models/issue.js","github/client.js","stores/issue_store.js","components/issue_count.js","models/pull_request.js","stores/pull_request_store.js","components/pull_request_count.js","components/repo_item.js","stores/repo_store.js","components/repo_list.js","components/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","logoURL","process","src","className","alt","React","Component","Login","props","state","token","handleChange","bind","handleSubmit","event","input","currentTarget","this","setState","value","preventDefault","assignToken","onSubmit","htmlFor","type","id","onChange","Repo","key","btoa","name","url","Issue","number","GitHubClient","storage","authenticated","getItem","setItem","request","octokit","Octokit","auth","method","path","result","IssueStore","client","repo","issues","do","response","data","issue","pull_request","push","headers","link","IssueCount","loading","store","list","then","count","priority","length","aria-label","size","PullRequest","PullRequestStore","pullRequests","pullRequest","PullRequestCount","RepoItem","parts","split","org","href","target","rel","issueStore","pullRequestStore","RepoStore","repos","full_name","html_url","sort","a","b","nameA","toUpperCase","nameB","RepoList","items","map","App","gitHubClient","body","repoStore","localStorage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1aa286ff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\n\ntype Props = {};\n\nclass Header extends React.Component<Props> {\n  render(): Node {\n    let logoURL = '/logo512.png';\n    if (process.env.PUBLIC_URL) {\n      logoURL = `${process.env.PUBLIC_URL}/logo512.png`;\n    }\n\n    return (\n      <header>\n        <img src={logoURL} className=\"logo\" alt=\"logo\" />\n        <h1>Paketo Buildpacks</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/login.css';\n\ntype Props = {\n  assignToken: string => void;\n};\n\ntype State = {\n  token: string,\n};\n\nclass Login extends React.Component<Props, State> {\n  handleChange: SyntheticEvent<HTMLInputElement> => void;\n  handleSubmit: SyntheticEvent<HTMLFormElement> => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { token: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: SyntheticEvent<HTMLInputElement>): void {\n    const input = (event.currentTarget: HTMLInputElement);\n    this.setState({ token: input.value });\n  }\n\n  handleSubmit(event: SyntheticEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    this.props.assignToken(this.state.token);\n  }\n\n  render(): Node {\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"token\">GitHub Personal Access Token</label>\n        <input type=\"text\" id=\"token\" value={this.state.token} onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Login;\n","// @flow\n\ntype Props = {\n  name: string,\n  url: string,\n};\n\nclass Repo {\n  key: string;\n  name: string;\n  url: string;\n\n  constructor(props: Props) {\n    this.key = btoa(props.name);\n    this.name = props.name;\n    this.url = props.url;\n  }\n}\n\nexport default Repo;\n","// @flow\n\ntype Props = {\n  number: number,\n};\n\nexport default class Issue {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport { Octokit } from '@octokit/rest';\n\nexport type GitHubClientRequest = {\n  method: string,\n  path: string,\n};\n\nexport type GitHubClientResponse = {\n  data: any[];\n  headers: {\n    link: ?string,\n  },\n};\n\ninterface Storage {\n  getItem(key: string): ?string;\n  setItem(key: string, value: string): void;\n};\n\ntype Props = {\n  storage: Storage,\n};\n\nexport default class GitHubClient {\n  storage: Storage;\n\n  assignToken: string => void;\n  authenticated: void => boolean;\n\n  constructor(props: Props) {\n    this.storage = props.storage;\n\n    this.assignToken = this.assignToken.bind(this);\n    this.authenticated = this.authenticated.bind(this);\n  }\n\n  authenticated(): boolean {\n    return !!this.storage.getItem('token');\n  }\n\n  assignToken(token: string) {\n    this.storage.setItem('token', token);\n  }\n\n  async do(request: GitHubClientRequest): Promise<GitHubClientResponse> {\n    const octokit = new Octokit({ auth: this.storage.getItem('token') });\n    const result = await octokit.request(`${request.method} ${request.path}`);\n\n    return result;\n  }\n}\n\nexport interface GitHubClientInterface {\n  assignToken(token: string): void;\n  authenticated(): boolean;\n  do(GitHubClientRequest): Promise<GitHubClientResponse>;\n};\n","// @flow\n\nimport Issue from '../models/issue';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class IssueStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<Issue[]> {\n    let path: string = `/repos/${repo}/issues`;\n    let issues: Issue[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const issue of response.data) {\n        if (!issue.pull_request) {\n          issues.push(new Issue({\n            number: issue.number,\n          }));\n        }\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return issues;\n  }\n};\n\nexport interface IssueStoreInterface {\n  list(repo: string): Promise<Issue[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../styles/issue_count.css';\nimport Issue from '../models/issue';\nimport Repo from '../models/repo';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { IssueOpenedIcon } from '@primer/octicons-react';\n\ntype Props = {\n  store: IssueStoreInterface,\n  repo: Repo,\n};\n\ntype State = {\n  loading: boolean,\n  issues: Issue[],\n};\n\nexport default class IssueCount extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      issues: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.store.list(this.props.repo.name).then((issues) => {\n      this.setState({ loading: false, issues: issues });\n    });\n  }\n\n  render(): Node {\n    let count: Node = '...';\n    let priority: string = 'none';\n\n    if (!this.state.loading) {\n      const length = this.state.issues.length;\n\n      if (length > 0) {\n        priority = 'low';\n      }\n\n      if (length > 3) {\n        priority = 'medium';\n      }\n\n      if (length > 6) {\n        priority = 'high';\n      }\n\n      count = `${length}`;\n    }\n\n    return (\n      <div className={`issue-count ${priority}`} aria-label='issue-count'>\n        <IssueOpenedIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\ntype Props = {\n  number: number,\n};\n\nexport default class PullRequest {\n  number: number;\n\n  constructor(props: Props) {\n    this.number = props.number;\n  }\n}\n","// @flow\n\nimport PullRequest from '../models/pull_request';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class PullRequestStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(repo: string): Promise<PullRequest[]> {\n    let path: string = `/repos/${repo}/pulls`;\n    let pullRequests: PullRequest[] = [];\n\n    while (path) {\n      const response: GitHubClientResponse = await this.client.do({\n        method: 'GET',\n        path: path,\n      });\n\n      for (const pullRequest of response.data) {\n        pullRequests.push(new PullRequest({\n          number: pullRequest.number,\n        }));\n      }\n\n      path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n    }\n\n    return pullRequests;\n  }\n};\n\nexport interface PullRequestStoreInterface {\n  list(repo: string): Promise<PullRequest[]>;\n};\n","// @flow\n\nimport React, { type Node } from 'react';\nimport '../styles/pull_request_count.css';\nimport PullRequest from '../models/pull_request';\nimport Repo from '../models/repo';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\nimport { GitPullRequestIcon } from '@primer/octicons-react';\n\ntype Props = {\n  store: PullRequestStoreInterface,\n  repo: Repo,\n};\n\ntype State = {\n  loading: boolean,\n  pullRequests: PullRequest[],\n};\n\nexport default class PullRequestCount extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      pullRequests: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.store.list(this.props.repo.name).then((pullRequests) => {\n      this.setState({ loading: false, pullRequests: pullRequests });\n    });\n  }\n\n  render(): Node {\n    let count: string = '...';\n    let priority: string = 'none';\n\n    if (!this.state.loading) {\n      const length = this.state.pullRequests.length;\n\n      if (length > 0 ) {\n        priority = 'low';\n      }\n\n      if (length > 3 ) {\n        priority = 'medium';\n      }\n\n      if (length > 6 ) {\n        priority = 'high';\n      }\n\n      count = `${length}`;\n    }\n\n    return (\n      <div className={`pull-request-count ${priority}`} aria-label='pull-request-count'>\n        <GitPullRequestIcon size={16} />\n        <div className='count'>{count}</div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/repo_item.css';\nimport Repo from '../models/repo';\nimport IssueCount from './issue_count';\nimport PullRequestCount from './pull_request_count';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\n\ntype Props = {\n  repo: Repo,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\nexport default class RepoItem extends React.Component<Props> {\n  render(): Node {\n    const parts = this.props.repo.name.split('/');\n\n    const org = parts[0];\n    const repo = parts[1];\n\n    return (\n      <div className=\"repo-item\">\n        <div className=\"org\">{org}</div>\n        <a\n          className=\"repo\"\n          href={this.props.repo.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >{repo}</a>\n        <div className=\"content\">\n          <IssueCount\n            store={this.props.issueStore}\n            repo={this.props.repo}\n          />\n          <PullRequestCount\n            store={this.props.pullRequestStore}\n            repo={this.props.repo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport Repo from '../models/repo';\nimport { GitHubClientInterface, type GitHubClientResponse } from '../github/client';\n\ntype Props = {\n  client: GitHubClientInterface,\n};\n\nexport default class RepoStore {\n  client: GitHubClientInterface;\n\n  constructor(props: Props) {\n    this.client = props.client;\n  }\n\n  async list(): Promise<Repo[]> {\n    let repos: Repo[] = [];\n\n    for (const org of ['paketo-buildpacks', 'paketo-community']) {\n      let path: string = `/orgs/${org}/repos`;\n\n      while (path) {\n        const response: GitHubClientResponse = await this.client.do({\n          method: 'GET',\n          path: path\n        });\n\n        for (const repo of response.data) {\n          repos.push(new Repo({\n            name: repo.full_name,\n             url: repo.html_url,\n          }));\n        }\n\n        path = ((response.headers.link || \"\").match( /<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n      }\n    }\n\n    repos.sort((a, b) => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    return repos;\n  }\n}\n\nexport interface RepoStoreInterface {\n  list(): Promise<Repo[]>;\n};\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport '../styles/repo_list.css';\nimport Repo from '../models/repo';\nimport RepoItem from './repo_item';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\n\ntype Props = {\n  store: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\ntype State = {\n  loading: boolean,\n  repos: Repo[],\n};\n\nclass RepoList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      repos: [],\n    };\n  }\n\n  async componentDidMount() {\n    const repos = await this.props.store.list();\n\n    this.setState({ loading: false, repos: repos });\n  }\n\n  render(): Node {\n    let items = (<div className=\"loading\">Loading...</div>);\n\n    if (!this.state.loading) {\n      items = this.state.repos.map((repo) => (\n        <RepoItem\n          key={repo.key}\n          repo={repo}\n          issueStore={this.props.issueStore}\n          pullRequestStore={this.props.pullRequestStore}\n        />\n      ));\n    }\n\n    return (\n      <div className=\"repo-list\">\n        {items}\n      </div>\n    );\n  }\n}\n\nexport default RepoList;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\n\nimport '../styles/app.css';\n\nimport Header from './header';\nimport Login from './login';\nimport RepoList from './repo_list';\n\nimport { GitHubClientInterface } from '../github/client';\nimport { RepoStoreInterface } from '../stores/repo_store';\nimport { IssueStoreInterface } from '../stores/issue_store';\nimport { PullRequestStoreInterface } from '../stores/pull_request_store';\n\ntype Props = {\n  gitHubClient: GitHubClientInterface,\n  repoStore: RepoStoreInterface,\n  issueStore: IssueStoreInterface,\n  pullRequestStore: PullRequestStoreInterface,\n};\n\ntype State = {\n  authenticated: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  assignToken: string => void;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { authenticated: this.props.gitHubClient.authenticated() };\n\n    this.assignToken = this.assignToken.bind(this);\n  }\n\n  assignToken(token: string): void {\n    this.props.gitHubClient.assignToken(token);\n    this.setState({ authenticated: this.props.gitHubClient.authenticated() });\n  }\n\n  render(): Node {\n    let body = <Login assignToken={this.assignToken} />;\n\n    if (this.state.authenticated) {\n      body = <RepoList\n        store={this.props.repoStore}\n        issueStore={this.props.issueStore}\n        pullRequestStore={this.props.pullRequestStore}\n      />\n    }\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <section className=\"body\">\n          {body}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/app';\n\nimport GitHubClient from './github/client';\nimport RepoStore from './stores/repo_store';\nimport IssueStore from './stores/issue_store';\nimport PullRequestStore from './stores/pull_request_store';\n\nconst storage = window.localStorage;\nconst gitHubClient = new GitHubClient({ storage: storage });\nconst repoStore = new RepoStore({ client: gitHubClient });\nconst issueStore = new IssueStore({ client: gitHubClient });\nconst pullRequestStore = new PullRequestStore({ client: gitHubClient });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      gitHubClient={gitHubClient}\n      repoStore={repoStore}\n      issueStore={issueStore}\n      pullRequestStore={pullRequestStore}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}